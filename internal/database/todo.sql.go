// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todo.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos(account_id, title, content, priority)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateTodoParams struct {
	AccountID pgtype.UUID
	Title     string
	Content   string
	Priority  Priority
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createTodo,
		arg.AccountID,
		arg.Title,
		arg.Content,
		arg.Priority,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getTodo = `-- name: GetTodo :one
SELECT title, content, priority, is_done, created_at
FROM todos
WHERE id = $1 AND account_id = $2
`

type GetTodoParams struct {
	ID        pgtype.UUID
	AccountID pgtype.UUID
}

type GetTodoRow struct {
	Title     string
	Content   string
	Priority  Priority
	IsDone    bool
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) GetTodo(ctx context.Context, arg GetTodoParams) (GetTodoRow, error) {
	row := q.db.QueryRow(ctx, getTodo, arg.ID, arg.AccountID)
	var i GetTodoRow
	err := row.Scan(
		&i.Title,
		&i.Content,
		&i.Priority,
		&i.IsDone,
		&i.CreatedAt,
	)
	return i, err
}
